/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Stake as PrismaStake,
  Blueprint as PrismaBlueprint,
  User as PrismaUser,
} from "@prisma/client";

export class StakeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.StakeCountArgs, "select">): Promise<number> {
    return this.prisma.stake.count(args);
  }

  async stakes(args: Prisma.StakeFindManyArgs): Promise<PrismaStake[]> {
    return this.prisma.stake.findMany(args);
  }
  async stake(args: Prisma.StakeFindUniqueArgs): Promise<PrismaStake | null> {
    return this.prisma.stake.findUnique(args);
  }
  async createStake(args: Prisma.StakeCreateArgs): Promise<PrismaStake> {
    return this.prisma.stake.create(args);
  }
  async updateStake(args: Prisma.StakeUpdateArgs): Promise<PrismaStake> {
    return this.prisma.stake.update(args);
  }
  async deleteStake(args: Prisma.StakeDeleteArgs): Promise<PrismaStake> {
    return this.prisma.stake.delete(args);
  }

  async getBlueprint(parentId: string): Promise<PrismaBlueprint | null> {
    return this.prisma.stake
      .findUnique({
        where: { id: parentId },
      })
      .blueprint();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.stake
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
