/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Blueprint } from "./Blueprint";
import { BlueprintCountArgs } from "./BlueprintCountArgs";
import { BlueprintFindManyArgs } from "./BlueprintFindManyArgs";
import { BlueprintFindUniqueArgs } from "./BlueprintFindUniqueArgs";
import { CreateBlueprintArgs } from "./CreateBlueprintArgs";
import { UpdateBlueprintArgs } from "./UpdateBlueprintArgs";
import { DeleteBlueprintArgs } from "./DeleteBlueprintArgs";
import { StakeFindManyArgs } from "../../stake/base/StakeFindManyArgs";
import { Stake } from "../../stake/base/Stake";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { User } from "../../user/base/User";
import { BlueprintService } from "../blueprint.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Blueprint)
export class BlueprintResolverBase {
  constructor(
    protected readonly service: BlueprintService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Blueprint",
    action: "read",
    possession: "any",
  })
  async _blueprintsMeta(
    @graphql.Args() args: BlueprintCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Blueprint])
  @nestAccessControl.UseRoles({
    resource: "Blueprint",
    action: "read",
    possession: "any",
  })
  async blueprints(
    @graphql.Args() args: BlueprintFindManyArgs
  ): Promise<Blueprint[]> {
    return this.service.blueprints(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Blueprint, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Blueprint",
    action: "read",
    possession: "own",
  })
  async blueprint(
    @graphql.Args() args: BlueprintFindUniqueArgs
  ): Promise<Blueprint | null> {
    const result = await this.service.blueprint(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Blueprint)
  @nestAccessControl.UseRoles({
    resource: "Blueprint",
    action: "create",
    possession: "any",
  })
  async createBlueprint(
    @graphql.Args() args: CreateBlueprintArgs
  ): Promise<Blueprint> {
    return await this.service.createBlueprint({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Blueprint)
  @nestAccessControl.UseRoles({
    resource: "Blueprint",
    action: "update",
    possession: "any",
  })
  async updateBlueprint(
    @graphql.Args() args: UpdateBlueprintArgs
  ): Promise<Blueprint | null> {
    try {
      return await this.service.updateBlueprint({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Blueprint)
  @nestAccessControl.UseRoles({
    resource: "Blueprint",
    action: "delete",
    possession: "any",
  })
  async deleteBlueprint(
    @graphql.Args() args: DeleteBlueprintArgs
  ): Promise<Blueprint | null> {
    try {
      return await this.service.deleteBlueprint(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Stake], { name: "stakes" })
  @nestAccessControl.UseRoles({
    resource: "Stake",
    action: "read",
    possession: "any",
  })
  async findStakes(
    @graphql.Parent() parent: Blueprint,
    @graphql.Args() args: StakeFindManyArgs
  ): Promise<Stake[]> {
    const results = await this.service.findStakes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Transaction], { name: "transactions" })
  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "read",
    possession: "any",
  })
  async findTransactions(
    @graphql.Parent() parent: Blueprint,
    @graphql.Args() args: TransactionFindManyArgs
  ): Promise<Transaction[]> {
    const results = await this.service.findTransactions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Blueprint): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
