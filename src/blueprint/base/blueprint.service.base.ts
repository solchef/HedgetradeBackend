/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Blueprint as PrismaBlueprint,
  Stake as PrismaStake,
  Transaction as PrismaTransaction,
  User as PrismaUser,
} from "@prisma/client";

export class BlueprintServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BlueprintCountArgs, "select">
  ): Promise<number> {
    return this.prisma.blueprint.count(args);
  }

  async blueprints(
    args: Prisma.BlueprintFindManyArgs
  ): Promise<PrismaBlueprint[]> {
    return this.prisma.blueprint.findMany(args);
  }
  async blueprint(
    args: Prisma.BlueprintFindUniqueArgs
  ): Promise<PrismaBlueprint | null> {
    return this.prisma.blueprint.findUnique(args);
  }
  async createBlueprint(
    args: Prisma.BlueprintCreateArgs
  ): Promise<PrismaBlueprint> {
    return this.prisma.blueprint.create(args);
  }
  async updateBlueprint(
    args: Prisma.BlueprintUpdateArgs
  ): Promise<PrismaBlueprint> {
    return this.prisma.blueprint.update(args);
  }
  async deleteBlueprint(
    args: Prisma.BlueprintDeleteArgs
  ): Promise<PrismaBlueprint> {
    return this.prisma.blueprint.delete(args);
  }

  async findStakes(
    parentId: string,
    args: Prisma.StakeFindManyArgs
  ): Promise<PrismaStake[]> {
    return this.prisma.blueprint
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .stakes(args);
  }

  async findTransactions(
    parentId: string,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.blueprint
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.blueprint
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
