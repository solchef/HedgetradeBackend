/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AdminListRelationFilter } from "../../admin/base/AdminListRelationFilter";
import { ValidateNested, IsOptional } from "class-validator";
import { Type } from "class-transformer";
import { BlueprintListRelationFilter } from "../../blueprint/base/BlueprintListRelationFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { StringFilter } from "../../util/StringFilter";
import { LeaderboardListRelationFilter } from "../../leaderboard/base/LeaderboardListRelationFilter";
import { NotificationListRelationFilter } from "../../notification/base/NotificationListRelationFilter";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { StakeListRelationFilter } from "../../stake/base/StakeListRelationFilter";
import { TransactionListRelationFilter } from "../../transaction/base/TransactionListRelationFilter";

@InputType()
class UserWhereInput {
  @ApiProperty({
    required: false,
    type: () => AdminListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AdminListRelationFilter)
  @IsOptional()
  @Field(() => AdminListRelationFilter, {
    nullable: true,
  })
  admins?: AdminListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => BlueprintListRelationFilter,
  })
  @ValidateNested()
  @Type(() => BlueprintListRelationFilter)
  @IsOptional()
  @Field(() => BlueprintListRelationFilter, {
    nullable: true,
  })
  blueprints?: BlueprintListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  email?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  firstName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  lastName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => LeaderboardListRelationFilter,
  })
  @ValidateNested()
  @Type(() => LeaderboardListRelationFilter)
  @IsOptional()
  @Field(() => LeaderboardListRelationFilter, {
    nullable: true,
  })
  leaderboards?: LeaderboardListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => NotificationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => NotificationListRelationFilter)
  @IsOptional()
  @Field(() => NotificationListRelationFilter, {
    nullable: true,
  })
  notifications?: NotificationListRelationFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  rank?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: () => StakeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => StakeListRelationFilter)
  @IsOptional()
  @Field(() => StakeListRelationFilter, {
    nullable: true,
  })
  stakes?: StakeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TransactionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TransactionListRelationFilter)
  @IsOptional()
  @Field(() => TransactionListRelationFilter, {
    nullable: true,
  })
  transactions?: TransactionListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  username?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  walletAddress?: StringNullableFilter;
}

export { UserWhereInput as UserWhereInput };
